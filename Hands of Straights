class Solution {
    static boolean isStraightHand(int n, int groupSize, int hand[]) {

        if(n%groupSize!=0) return false;
        TreeMap<Integer,Integer> tm=new TreeMap<>();
        for(int i:hand){
            tm.put(i,tm.getOrDefault(i,0)+1);
        }
     
        while(!tm.isEmpty()){
            int curr=tm.firstKey(),freq=tm.get(curr);
           for(int j=1;j<groupSize;j++){

// getting the next consecutive number 
               int cons=curr+j;

// checking if map contains cons
               if(!tm.containsKey(cons)){
                   return false;
               }else{

// checking if the frequency of cons is less than curr number 
// if yes we can return false

                if(tm.get(cons)<freq) return false;
                tm.put(cons,tm.get(cons)-freq);
                 if(tm.get(cons)==0) tm.remove(cons);
               }
           }

//removing the curr element from map as all pairs that can be      made using this are made

            tm.remove(curr);
        }
        return true;
    }
}
