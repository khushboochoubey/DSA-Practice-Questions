/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) {
        val = x;
    }
}

class Solution {
    public int pseudoPalindromicPaths(TreeNode root) {
        return countPaths(root, new HashMap<>());
    }

    private int countPaths(TreeNode node, Map<Integer, Integer> pathCount) {
        if (node == null) {
            return 0;
        }

        // Update the count of the current node's value in the path
        pathCount.put(node.val, pathCount.getOrDefault(node.val, 0) + 1);

        // If it's a leaf node, check if the path is pseudo-palindromic
        if (node.left == null && node.right == null) {
            int oddCount = 0;
            for (int count : pathCount.values()) {
                if (count % 2 != 0) {
                    oddCount++;
                }
            }
            // If there's at most one odd count, the path is pseudo-palindromic
            return oddCount <= 1 ? 1 : 0;
        }

        // Recursive calls for left and right children
        int leftPaths = countPaths(node.left, new HashMap<>(pathCount));
        int rightPaths = countPaths(node.right, new HashMap<>(pathCount));

        // Total paths including both left and right
        return leftPaths + rightPaths;
    }
}
