class Solution {
    public int strStr(String haystack, String needle) {
        int ln = needle.length();
        
        // Check if haystack is shorter than needle, return -1
        if (haystack.length() < ln) {
            return -1;
        }
        
        // If haystack and needle are equal, return 0 (first occurrence at index 0)
        if (haystack.equals(needle)) {
            return 0;
        }
        
        // Loop through haystack with a sliding window approach
        // to check substrings of the same length as needle
        for (int i = 0; i < haystack.length() - ln + 1; i++) {
            // Extract the substring of haystack with the same length as needle
            String s = haystack.substring(i, i + ln);
            
            // Check if the extracted substring matches the needle
            if (s.equals(needle)) {
                // If a match is found, return the current index (first occurrence)
                return i;
            }
        }
        
        // If no match is found, return -1 (needle is not part of haystack)
        return -1;
    }
}
