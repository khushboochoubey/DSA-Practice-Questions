class Solution {
    public int[][] onesMinusZeros(int[][] grid) {
         int m = grid.length;
        int n = grid[0].length;
        
        int[][] diff = new int[m][n];
        
        int[] onesRow = new int[m];
        int[] onesCol = new int[n];
        int[] zerosRow = new int[m];
        int[] zerosCol = new int[n];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    onesRow[i]++;
                    onesCol[j]++;
                } else {
                    zerosRow[i]++;
                    zerosCol[j]++;
                }
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                diff[i][j] = onesRow[i] + onesCol[j] - zerosRow[i] - zerosCol[j];
            }
        }
        
        return diff;
    }
}




// class Solution {
//     public int[][] onesMinusZeros(int[][] grid) {
//         int[] rowOnes = new int[grid.length];
//         int[] colOnes = new int[grid[0].length];
//         for(int i = 0; i < grid.length; i++) {
//             for(int j = 0; j < grid[0].length; j++) {
//                 rowOnes[i] += grid[i][j];
//                 colOnes[j] += grid[i][j];
//             }
//         }
//         for(int i = 0; i < grid.length; i++) {
//             for(int j = 0; j < grid[0].length; j++) {
//                 grid[i][j] = 2 * (rowOnes[i] + colOnes[j]) - grid.length - grid[0].length;
//             }
//         }

//         return grid;
//     }
// }
