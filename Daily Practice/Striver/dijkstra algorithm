import java.util.*;

class Solution {

    static class Node {
        int vertex;
        int weight;

        Node(int v, int w) {
            vertex = v;
            weight = w;
        }
    }

    static class DistanceNode {
        int vertex;
        int distance;

        DistanceNode(int v, int d) {
            vertex = v;
            distance = d;
        }
    }

    public static List<Integer> dijkstra(int[][] edges, int vertices, int edgesCount, int source) {
        List<List<Node>> adjacencyList = new ArrayList<>();
        for (int i = 0; i < vertices; i++) {
            adjacencyList.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int weight = edge[2];
            adjacencyList.get(u).add(new Node(v, weight));
            adjacencyList.get(v).add(new Node(u, weight));
        }

        Queue<DistanceNode> queue = new LinkedList<>();
        queue.add(new DistanceNode(source, 0));

        List<Integer> distances = new ArrayList<>(Collections.nCopies(vertices, Integer.MAX_VALUE));
        distances.set(source, 0);

        while (!queue.isEmpty()) {
            DistanceNode current = queue.poll();
            int node = current.vertex;
            int distance = current.distance;

            for (Node neighbor : adjacencyList.get(node)) {
                int connectedNode = neighbor.vertex;
                int weight = neighbor.weight;

                if (distances.get(node) + weight < distances.get(connectedNode)) {
                    distances.set(connectedNode, distances.get(node) + weight);
                    queue.add(new DistanceNode(connectedNode, distances.get(connectedNode)));
                }
            }
        }

        return distances;
    }
}
