public class Solution {
    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null) {
            return null; // If the list is empty or has only one node, there can't be a cycle
        }

        ListNode slow = head;
        ListNode fast = head;

        // Find the meeting point of slow and fast pointers within the cycle
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                break; // If slow and fast pointers meet, there is a cycle
            }
        }

        // If there's no cycle, return null
        if (fast == null || fast.next == null) {
            return null;
        }

        // Move slow pointer back to the head and advance both pointers at the same speed
        slow = head;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }

        return slow; // Return the node where the cycle begins
    }
}
