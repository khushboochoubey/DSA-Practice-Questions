class Solution {
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>>ans = new ArrayList<>();
        ArrayList<Integer>temp = new ArrayList<>();
        int pRow[] = new int[n];
        int diaL[] = new int[2*n-1];
        int diaU[] = new int[2*n-1];
        int col = 0;
        solve(ans, temp, pRow, diaL, diaU, col, n);
        return ans;
    }
    public void solve(ArrayList<ArrayList<Integer>>ans, ArrayList<Integer>temp,
    int pRow[], int diaL[], int diaU[], int col, int n){
        if(col == n){
            ans.add(new ArrayList<>(temp));
            return;
        }
        for(int row=0;row<n;row++){
            if(pRow[row] == 0 && diaU[n-1+col-row] == 0 && diaL[row+col] == 0){
                pRow[row] = 1;
                diaU[n-1+col-row] = 1;
                diaL[row+col] = 1;
                temp.add(row+1);
                solve(ans, temp, pRow, diaL, diaU, col+1, n);
                temp.remove(temp.size()-1);
                pRow[row] = 0;
                diaU[n-1+col-row] = 0;
                diaL[row+col] = 0;
            }
        }
    }
}
